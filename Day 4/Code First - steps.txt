Step 1: Create a new ASP.net Core MVC APP
Step 2: Add Entities (classes) with properties
step 3: Add Nuget Packages for EF 
	Microsoft.EntityFrameworkCore.Tools
	Microsoft.EntityFrameworkCore.Design
	Microsoft.EntityFrameworkCore
	Microsoft.EntityFrameworkCore.SqlServer
step 4: let us mark 1 of the column as Primary key and make it an identity key 
	[Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int empNo { get; set; }
step 5 : Add a connection string to appsettings.json
step 6: We need to add dbContext class
	-we will add DbSet<ClassName> propertyName;
	-overloaded constructor
step 7: in program.cs - add a service to use SqlServer and map the conneciton string
	builder.Services.AddDbContext<empDBContext>(server => server.UseSqlServer(builder.Configuration["ConnectionString:myempserver"]));


step 8: Apply migration to the application
	Add-migration somename

step 9: update-database commmand

step 10 : create a new controller - with EF and all the Views (UI) will get created for us
	test the application, by running it, perform crud operations 
-----------------------------------------------------------------------------------
Try:
	1. add a new class, deptartmentdetails
	2. add 4 propertis to the same, deptNo, deptName, deptLocation, deptHead
		deptno to be marked as [Key] - not to be autogenerated
	3. Add a property in DbContext class for the above class
	4. fire - Add-Migration added_deptEntity
	5. update-datebase
	6. create a new controller - with EF and all the Views (UI) will get created for us
	test the application, by running it, perform crud operations 















	
